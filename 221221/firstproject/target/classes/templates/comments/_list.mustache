<div id="comments-list" class="m-3">

	{{#commentsDtos}}
	<div id="comments-{{id}}" class="card m-2">
		<div class="card-header">
			{{nickname}}

			<!-- 수정버튼 -->
			<!-- Button tirgger modal -->
			<!-- 버튼이 클릭되면 수정 폼에 commentsDtos의 수정할 데이터를 넣어준다. -->
			<button 
				type="button" 
				class="btn btn-outline-dark btn-sm" 
				data-bs-toggle="modal" 
				data-bs-target="#comment-edit-modal"
				data-bs-id="{{id}}"
				data-bs-nickname="{{nickname}}"
				data-bs-body="{{body}}"
				data-bs-article-id="{{articleId}}"
				> 수정
			</button>
			
			
			<!-- 삭제버튼 -->
			<button 
				type="button" 
				class="btn btn-dark btn-sm comment-delete-btn"
				data-comment-id="{{id}}">
				삭제
			</button>
			
		</div>
		<div class="card-body">{{body}}</div>
	</div>
	{{/commentsDtos}} 
	
	{{^commentsDtos}}
	<div id="comments-{{id}}" class="card m-2">
		<div class="card-body">댓글이 없습니다.</div>
	</div>
	{{/commentsDtos}}
</div>

<!-- Modal -->
<div class="modal fade" id="comment-edit-modal" tabindex="-1">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="exampleModalLabel">댓글 수정</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			
			<div class="modal-body">
				
				<!-- 댓글 수정 폼 삽입 => _new.mustache 파일의 댓글 작성 폼을 복사해서 수정 -->
				<form >
					<!-- 닉네임 입력 -->
					<div class="mb-3">
						<label for="edit-comment-nickname" class="form-label">닉네임</label>
						<input id="edit-comment-nickname" class="form-control">
					</div>
					
					<!-- 댓글 입력 -->
					<div class="mb-3">
						<label for="edit-comment-body" class="form-label">댓글</label>
						<textarea id="edit-comment-body" class="form-control" rows="5" style="resize: none;"></textarea>
					</div>
					
					<!-- 작성하는 댓글이 어떤 메인글의 댓글인가 저장하기 위해 메인글의 id를 히든으로 전달한다. -->
					<input type="hidden" id="edit-comment-id"> <!-- 댓글 id -->
					<input type="hidden" id="edit-comment-article-id"> <!-- 메인글 id -->
					
					<button id="comment-update-btn" class="btn btn-outline-dark" type="button">댓글수정</button>
				</form>
				
			</div>
		</div>
	</div>
</div>


<!-- 댓글 수정 모달 이벤트 처리 -->
<script type="text/javascript">
{
	// 모달 요소 선택
	const commentEditModal = document.querySelector('#comment-edit-modal');
	// 모달 이벤트 감지
	commentEditModal.addEventListener('show.bs.modal', function (event) {
		// 모달 창이 열릴 때 event에서 트리거 버튼을 선택한다.
		const triggerBtn = event.relatedTarget;
		// 수정 버튼이 클릭될 떄 data-bs-* 데이터 가져오기
		const id = triggerBtn.getAttribute('data-bs-id');
		const nickname = triggerBtn.getAttribute('data-bs-nickname');
		const body = triggerBtn.getAttribute('data-bs-body');
		const articleId = triggerBtn.getAttribute('data-bs-article-id');
		console.log('id: ' + id + ', nickname: ' + nickname + ', body: ' + body + ', articleId: ' + articleId);
		
		// 수정 폼에 데이터를 반영한다.
		document.querySelector('#edit-comment-id').value = id;
		document.querySelector('#edit-comment-nickname').value = nickname;
		document.querySelector('#edit-comment-body').value = body;
		document.querySelector('#edit-comment-article-id').value = articleId;
	})
}

{
	// 수정 완료 버튼을 선택해서 click 이번트를 걸어준다.
	const commentUpdateBtn = document.querySelector('#comment-update-btn');
	// 클릭 이벤트 감지 및 처리
	commentUpdateBtn.addEventListener('click', function() {
		// console.log('수정완료 버튼이 클릭됨');
		// 수정 댓글 객체를 생성한다.
		const comment = {
			id: document.querySelector('#edit-comment-id').value,
			nickname: document.querySelector('#edit-comment-nickname').value,
			body: document.querySelector('#edit-comment-body').value,
			article_id: document.querySelector('#edit-comment-article-id').value
		};
		// 댓글 객체 출력
		// console.log(comment);
		
		// fetch Ajax를 이용해서 Rest APO를 호출한다.
		//@PatchMapping("/api/comments/{id}")
		const url = '/api/comments/' + comment.id;
		console.log(url);
		
		fetch(url, {
			method: 'PATCH', // PATCH 요청, 대문자로
			body: JSON.stringify(comment), // 수정된 댓글 객체를 json 객체로 변환
			headers: {
				'Content-Type': 'application/json'
			}
		}).then(function (response) {
			console.log(response)
			// http 응답 코드에따른 메시지 출력
			const msg = response.ok ? '댓글 수정 완료!' : ' 댓글 수정 실패!';
			alert(msg);
			// 현재 페이지를 새로고침한다.
			location.reload();
		});
	});	
}

<!-- 댓글 삭제 이벤트 처리 -->
{
	// 모든 삭제 버튼을 선택해서 click 이벤트를 걸어준다.
	const commentDeleteBtn = document.querySelectorAll('.comment-delete-btn');
	// 모든 삭제 버튼의 이벤트 처리
	commentDeleteBtn.forEach(function(btn, index) {
		//console.log(btn, index);
		btn.addEventListener('click', function() {
			//console.log('삭제 버튼이 클릭됨');
			// 이벤트를 발생시킨 요소(버튼)을 선책한다.
			const deleteBtn = event.srcElement; // event.target도 같은 기능
			// console.log(deleteBtn);
			const commentId = deleteBtn.getAttribute('data-comment-id');
			//console.log(`삭제 버튼 클릭: ${commentId}번 댓글`)
			
			// fetch Ajax를 이용해서 Rest APO를 호출한다.
			//@PatchMapping("/api/comments/{id}")
			const url = `/api/comments/${commentId}`;
			console.log(url);
			
			fetch(url, {
				method: 'DELETE', // DELETE 요청
			}).then(function (response) {
				// 댓글 삭제 실패 처리
				if (!response.ok) {
					alert("댓글 삭제 실패!");
					return;
				}
				// 현재 페이지를 새로고침
				//location.reload();
				
				// then()으로 왔다면 댓글이 이미 삭제가 된 상태이므로 댓글을 표시한 객체를 화면에서 지운다.
				const target = document.querySelector(`#comments-${commentId}`);
				// remove() 함수를 사용하면 화면을 새로고침하지 않고 댓글이 삭제된 결과가 표시된다.
				target.remove();
			});
		});
	});
}

</script>